// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum Category {
  FASHION
  ELECTRONICS
  LIFESTYLE
  PHONE
  ACCESSORIES
  AUTOMOBILE
  GROCERRIES
}

model Waitlist {
  id           String  @id @default(uuid())
  email        String  @unique
  isSubscribed Boolean @default(true)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model User {
  id                 String   @id @default(uuid())
  name               String
  email              String   @unique
  username           String   @unique
  phone_number       String
  password           String
  verification_code  String?
  isVerified         Boolean  @default(false)
  refresh_token      String[]
  address            String[]
  resetPasswordToken String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  cartItems CartItem[]
  orders    Order[]
}

model Merchant {
  id       String    @id @default(uuid())
  name     String
  email    String    @unique
  phone_number String
  username String @unique
  password String
  verification_code String?
  address String
  city String
  country String
  dp String
  refresh_token      String[]
  resetPasswordToken String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  products Product[]
}

model Product {
  id         String         @id @default(uuid())
  name       String
  description       String
  price      Decimal
  Merchant   Merchant       @relation(fields: [merchantId], references: [id])
  merchantId String
  category Category
  dp String
  images String[]
  quantity BigInt
  isInStock Boolean @default(true)
  color String[]
  dimension Json?
  ratings Decimal[]
  
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  cartItems  CartItem[]
  products   OrderProduct[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String   @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  productId String   @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

model Order {
  id        String           @id @default(uuid())
  userId    String           @default(uuid())
  user      User             @relation(fields: [userId], references: [id])
  netAmount Decimal
  address   String
  status    OrderEventStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  products  OrderProduct[]
  events    OrderEvents[]

  @@map("orders")
}

model OrderProduct {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")
}

model OrderEvents {
  id        String           @id @default(uuid())
  orderId   String
  order     Order            @relation(fields: [orderId], references: [id])
  status    OrderEventStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("order_events")
}
